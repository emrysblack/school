#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len ints to dst.
# Return the number of positive ints (>0) contained in src.
#
# Include your name and ID here.
#
# Describe how and why you modified the baseline code.
#
##################################################################
	# Function prologue. Do not modify saving/setting %ebp.
ncopy:	pushl  %ebp		# Save old frame pointer
	rrmovl %esp,%ebp	# Set up new frame pointer
	pushl  %esi		# Save callee-save regs
	pushl  %ebx
	mrmovl 8(%ebp),%ebx	# src
	mrmovl 12(%ebp),%ecx	# dst
	mrmovl 16(%ebp),%edx	# len

	# Loop header
	xorl   %esi,%esi	# count = 0;
	andl   %edx,%edx		# len <= 0?
	jg    Loop		# if so, goto Loop:

	rrmovl %esi, %eax
	popl %ebx
	popl %esi
	# Function epilogue. Do not modify unless you implement 'leave'.
	rrmovl %ebp, %esp
	popl %ebp
	ret

	# Loop body.
Loop:	mrmovl (%ebx), %eax	# read val from src...
	rmmovl %eax, (%ecx)	# ...and store it to dst
        irmovl $1, %edi
	subl   %edi, %edx	# len--
	irmovl $4, %edi
	addl   %edi, %ebx	# src++
	addl   %edi, %ecx	# dst++
        andl   %eax, %eax		# val > 0?
	jg    Inc		# if so, goto Inc:

Npos:	andl   %edx,%edx	# len > 0?
	jg     Loop		# if so, goto Loop:
        rrmovl %esi, %eax
	popl %ebx
	popl %esi
	# Function epilogue. Do not modify unless you implement 'leave'.
	rrmovl %ebp, %esp
	popl %ebp
	ret

Inc:    irmovl $1, %edi
	addl   %edi, %esi	# count++
        andl   %edx,%edx	# len > 0?
	jg     Loop		# if so, goto Loop:
        rrmovl %esi, %eax
	popl %ebx
	popl %esi
	# Function epilogue. Do not modify unless you implement 'leave'.
	rrmovl %ebp, %esp
	popl %ebp
	ret


#/* $end ncopy-ys */
