<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
               "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"
lang="en" xml:lang="en">
<head>
<title>Inquisitiveness</title>
<meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1"/>
<meta name="generator" content="Org-mode"/>
<meta name="generated" content="2016-06-22 14:29:32 MDT"/>
<meta name="author" content="Brady Field"/>
<style type="text/css">
 <!--/*--><![CDATA[/*><!--*/
  html { font-family: Times, serif; font-size: 12pt; }
  .title  { text-align: center; }
  .todo   { color: red; }
  .done   { color: green; }
  .tag    { background-color:lightblue; font-weight:normal }
  .target { }
  .timestamp { color: grey }
  .timestamp-kwd { color: CadetBlue }
  p.verse { margin-left: 3% }
  pre {
	border: 1pt solid #AEBDCC;
	background-color: #F3F5F7;
	padding: 5pt;
	font-family: courier, monospace;
        font-size: 90%;
        overflow:auto;
  }
  table { border-collapse: collapse; }
  td, th { vertical-align: top; }
  dt { font-weight: bold; }
  div.figure { padding: 0.5em; }
  div.figure p { text-align: center; }
  .linenr { font-size:smaller }
  .code-highlighted {background-color:#ffff00;}
  .org-info-js_info-navigation { border-style:none; }
  #org-info-js_console-label { font-size:10px; font-weight:bold;
                               white-space:nowrap; }
  .org-info-js_search-highlight {background-color:#ffff00; color:#000000;
                                 font-weight:bold; }
  /*]]>*/-->
</style>
<script type="text/javascript">
<!--/*--><![CDATA[/*><!--*/
 function CodeHighlightOn(elem, id)
 {
   var target = document.getElementById(id);
   if(null != target) {
     elem.cacheClassElem = elem.className;
     elem.cacheClassTarget = target.className;
     target.className = "code-highlighted";
     elem.className   = "code-highlighted";
   }
 }
 function CodeHighlightOff(elem, id)
 {
   var target = document.getElementById(id);
   if(elem.cacheClassElem)
     elem.className = elem.cacheClassElem;
   if(elem.cacheClassTarget)
     target.className = elem.cacheClassTarget;
 }
/*]]>*/-->
</script>
</head><body>
<h1 class="title">Inquisitiveness</h1>


<div id="outline-container-1" class="outline-2">
<h2 id="sec-1">Exploration 2 </h2>
<div id="text-1">


<p>
You are invited to inquisitively evaluate algorithm efficiency using
Big-Oh <b>and</b> empirical measurements. This invitation to exploration
is codenamed <i>Inquisitiveness</i>.
</p>

</div>

<div id="outline-container-1.1" class="outline-3">
<h3 id="sec-1.1">Collaborators </h3>
<div id="text-1.1">

<p>Thom - talked about optimizations, Matthew - talked about N<sup>2</sup> sorting algorithms, Lance - helped with table layout
</p>

</div>

<div id="outline-container-1.1.1" class="outline-4">
<h4 id="sec-1.1.1">Introduction </h4>
<div id="text-1.1.1">


<p>
In this exploration we are concerned with comparing different
algorithms. I expect the reason is to see how the math compares with
the actual performace. On top of that, it will be fun to see what
enviremental factors do to it. I included some charts comparing the algorithms side-by-side. I also included tables with all of the data resulting from the tests run. There is a lot of data.
</p>
</div>

</div>

<div id="outline-container-1.1.2" class="outline-4">
<h4 id="sec-1.1.2">Specific Deliverables for Parts 1 and 2 </h4>
<div id="text-1.1.2">


<ol>
<li>
Timings and a report for the "n-squared" algorithms.

</li>
</ol>

<p>I decided to look at how different languages and optimizations would
affect these algorithms.  I made a list for each scenario type. These
included a random list, an ordered list, a reversed list, and a mostly
ordered list. I then ran these through the GCC with various
optimizations and compared them to Java.  The Java outperformed C++ as
long as there were no optimizations attached to the C++. I was
surprised by this. I thought C++ was supposed to be inherently
faster. Also, the insertion sort outperformed the bubble sort
basically across the board. I was surprised at how much faster it was
considering they are in the same class of sorting algorithm. It makes
me think that the bubble sort could be considered useless from a
practical perspective. The insertion sort could always be used at no
extra overhead. It would perform much better and be just as easy to
implement. If I had more time, I would have liked to play more with
different operating systems and look at 32-bit and 64-bit
architectures. I ran into an interesting thing where the bubble sort
reversed list actually sorted faster than the random list. It turns
out this is due to strong branch prediction on the reversed list which
the CPU was able to leverage heavily like we learned in Bro. Jones'
Operating Systems class.
</p>

<p>
<a href="https://drive.google.com/open?id=0B5jKo5AwnwRcc1cyVnZ4ZDd3WFU">N<sup>2</sup> Random List</a>
<a href="highres.jpg">N<sup>2</sup> Backword List</a>
<a href="highres.jpg">N<sup>2</sup> Sorted List</a>
<a href="highres.jpg">N<sup>2</sup> Almost Sorted List</a>
</p>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">
<col align="left"></col><col align="left"></col>
<thead>
<tr><th>Bubble Sort (Random List)</th><th></th></tr>
</thead>
</table>



<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">
<colgroup><col align="left"></col></colgroup><colgroup><col align="right"></col><col align="right"></col><col align="left"></col><col align="left"></col><col align="left"></col></colgroup>
<thead>
<tr><th>input size</th><th>C++</th><th>C++ O1</th><th>C++ O2</th><th>C++ O3</th><th>Java</th></tr>
</thead>
<tbody>
<tr><td>60,000</td><td>15.03</td><td>6.2</td><td>6.24</td><td>6.09</td><td>9.312271</td></tr>
<tr><td>70,000</td><td>20.53</td><td>8.48</td><td>8.54</td><td>8.32</td><td>12.779931</td></tr>
<tr><td>80,000</td><td>26.97</td><td>11.1</td><td>11.17</td><td>10.84</td><td>16.649455</td></tr>
<tr><td>90,000</td><td>34.1</td><td>14.32</td><td>14.19</td><td>13.8</td><td>21.233529</td></tr>
<tr><td>100,000</td><td>42.07</td><td>17.43</td><td>17.54</td><td>17.02</td><td>26.273268</td></tr>
</tbody>
</table>



<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">
<col align="left"></col><col align="left"></col>
<thead>
<tr><th>Insertion Sort (Random List)</th><th></th></tr>
</thead>
</table>



<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">
<colgroup><col align="left"></col></colgroup><colgroup><col align="right"></col><col align="right"></col><col align="left"></col><col align="left"></col><col align="left"></col></colgroup>
<thead>
<tr><th>input size</th><th>C++</th><th>C++ O1</th><th>C++ O2</th><th>C++ O3</th><th>Java</th></tr>
</thead>
<tbody>
<tr><td>60,000</td><td>3.05</td><td>0.8</td><td>0.53</td><td>0.53</td><td>0.357037</td></tr>
<tr><td>70,000</td><td>4.15</td><td>1.08</td><td>0.73</td><td>0.73</td><td>0.484877</td></tr>
<tr><td>80,000</td><td>5.41</td><td>1.42</td><td>0.95</td><td>0.95</td><td>0.63159</td></tr>
<tr><td>90,000</td><td>6.85</td><td>1.8</td><td>1.2</td><td>1.21</td><td>0.797133</td></tr>
<tr><td>100,000</td><td>8.45</td><td>2.21</td><td>1.49</td><td>1.49</td><td>0.986544</td></tr>
</tbody>
</table>



<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">
<col align="left"></col><col align="left"></col>
<thead>
<tr><th>Bubble Sort (Backword List)</th><th></th></tr>
</thead>
</table>



<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">
<colgroup><col align="left"></col></colgroup><colgroup><col align="right"></col><col align="right"></col><col align="left"></col><col align="left"></col><col align="left"></col></colgroup>
<thead>
<tr><th>input size</th><th>C++</th><th>C++ O1</th><th>C++ O2</th><th>C++ O3</th><th>Java</th></tr>
</thead>
<tbody>
<tr><td>60,000</td><td>13.5</td><td>3.85</td><td>3.77</td><td>3.8</td><td>6.473759</td></tr>
<tr><td>70,000</td><td>18.38</td><td>5.13</td><td>5.13</td><td>5.17</td><td>8.814748</td></tr>
<tr><td>80,000</td><td>24.05</td><td>6.69</td><td>6.7</td><td>6.77</td><td>11.525414</td></tr>
<tr><td>90,000</td><td>30.4</td><td>8.49</td><td>8.55</td><td>8.56</td><td>14.725726</td></tr>
<tr><td>100,000</td><td>37.49</td><td>10.47</td><td>10.48</td><td>10.58</td><td>18.014543</td></tr>
</tbody>
</table>



<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">
<col align="left"></col><col align="left"></col>
<thead>
<tr><th>Insertion Sort (Backword List)</th><th></th></tr>
</thead>
</table>



<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">
<colgroup><col align="left"></col></colgroup><colgroup><col align="right"></col><col align="right"></col><col align="left"></col><col align="left"></col><col align="left"></col></colgroup>
<thead>
<tr><th>input size</th><th>C++</th><th>C++ O1</th><th>C++ O2</th><th>C++ O3</th><th>Java</th></tr>
</thead>
<tbody>
<tr><td>60,000</td><td>6.07</td><td>1.6</td><td>1.07</td><td>1.07</td><td>0.69097</td></tr>
<tr><td>70,000</td><td>8.31</td><td>2.18</td><td>1.45</td><td>1.45</td><td>0.942501</td></tr>
<tr><td>80,000</td><td>10.94</td><td>2.85</td><td>1.9</td><td>1.9</td><td>1.238339</td></tr>
<tr><td>90,000</td><td>13.66</td><td>3.6</td><td>2.41</td><td>2.41</td><td>1.576092</td></tr>
<tr><td>100,000</td><td>16.9</td><td>4.45</td><td>2.97</td><td>2.97</td><td>1.955185</td></tr>
</tbody>
</table>



<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">
<col align="left"></col><col align="left"></col>
<thead>
<tr><th>Bubble Sort (Sorted List)</th><th></th></tr>
</thead>
</table>



<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">
<colgroup><col align="left"></col></colgroup><colgroup><col align="right"></col><col align="right"></col><col align="left"></col><col align="left"></col><col align="left"></col></colgroup>
<thead>
<tr><th>input size</th><th>C++</th><th>C++ O1</th><th>C++ O2</th><th>C++ O3</th><th>Java</th></tr>
</thead>
<tbody>
<tr><td>60,000</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0.000079</td></tr>
<tr><td>70,000</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0.000083</td></tr>
<tr><td>80,000</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0.000101</td></tr>
<tr><td>90,000</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0.000107</td></tr>
<tr><td>100,000</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0.000119</td></tr>
</tbody>
</table>



<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">
<col align="left"></col><col align="left"></col>
<thead>
<tr><th>Insertion Sort (Sorted List)</th><th></th></tr>
</thead>
</table>



<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">
<colgroup><col align="left"></col></colgroup><colgroup><col align="right"></col><col align="right"></col><col align="left"></col><col align="left"></col><col align="left"></col></colgroup>
<thead>
<tr><th>input size</th><th>C++</th><th>C++ O1</th><th>C++ O2</th><th>C++ O3</th><th>Java</th></tr>
</thead>
<tbody>
<tr><td>60,000</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0.000132</td></tr>
<tr><td>70,000</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0.000153</td></tr>
<tr><td>80,000</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0.000173</td></tr>
<tr><td>90,000</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0.000195</td></tr>
<tr><td>100,000</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0.000215</td></tr>
</tbody>
</table>



<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">
<col align="left"></col><col align="left"></col>
<thead>
<tr><th>Bubble Sort (Almost Sorted List)</th><th></th></tr>
</thead>
</table>



<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">
<colgroup><col align="left"></col></colgroup><colgroup><col align="right"></col><col align="right"></col><col align="left"></col><col align="left"></col><col align="left"></col></colgroup>
<thead>
<tr><th>input size</th><th>C++</th><th>C++ O1</th><th>C++ O2</th><th>C++ O3</th><th>Java</th></tr>
</thead>
<tbody>
<tr><td>60,000</td><td>9.58</td><td>3</td><td>3</td><td>3</td><td>4.068298</td></tr>
<tr><td>70,000</td><td>13.04</td><td>4.08</td><td>4.08</td><td>4.09</td><td>5.538731</td></tr>
<tr><td>80,000</td><td>17.04</td><td>5.34</td><td>5.32</td><td>5.33</td><td>7.607692</td></tr>
<tr><td>90,000</td><td>21.56</td><td>6.75</td><td>6.75</td><td>6.75</td><td>9.230042</td></tr>
<tr><td>100,000</td><td>26.8</td><td>8.34</td><td>8.33</td><td>8.34</td><td>11.298494</td></tr>
</tbody>
</table>



<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">
<col align="left"></col><col align="left"></col>
<thead>
<tr><th>Insertion Sort (Almost Sorted List)</th><th></th></tr>
</thead>
</table>



<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">
<colgroup><col align="left"></col></colgroup><colgroup><col align="right"></col><col align="right"></col><col align="left"></col><col align="left"></col><col align="left"></col></colgroup>
<thead>
<tr><th>input size</th><th>C++</th><th>C++ O1</th><th>C++ O2</th><th>C++ O3</th><th>Java</th></tr>
</thead>
<tbody>
<tr><td>60,000</td><td>1.21</td><td>0.32</td><td>0.21</td><td>0.22</td><td>0.161375</td></tr>
<tr><td>70,000</td><td>1.66</td><td>0.44</td><td>0.29</td><td>0.29</td><td>0.219839</td></tr>
<tr><td>80,000</td><td>2.17</td><td>0.57</td><td>0.38</td><td>0.38</td><td>0.286756</td></tr>
<tr><td>90,000</td><td>2.74</td><td>0.72</td><td>0.48</td><td>0.48</td><td>0.36396</td></tr>
<tr><td>100,000</td><td>3.39</td><td>0.89</td><td>0.59</td><td>0.59</td><td>0.451258</td></tr>
</tbody>
</table>



<ol>
<li>
Timings and a report for the "n log n" algorithms.

</li>
</ol>

<p>I wanted to look at the Merge Sort and the Quick Sort on this one. The
Merge Sort intrigues me because it can be done on external data if
need be. The Quick Sort was interesting because it seems like a simple
algorithm, but it is widely praised for its performance. What I found
out about the Merge Sort was that it doesn't really care about the
configuration of what is being sorted. It performs basically the same
on sorted, random, reversed, and almost sorted lists. It only seems to
care about the size of the input. It could be said that is a very
dependable algorithm. As for Quick Sort, it outperformed everything
else. In fact, I wish I could have had more time to run these
algorithms on much bigger datasets since even the large lists I
plugged in didn't make much of a dent in either of the NlogN sorting
algorithms.
</p>

<p>
<a href="highres.jpg"><img src="thumb.jpg"/></a>
<a href="highres.jpg"><img src="thumb.jpg"/></a>
<a href="highres.jpg"><img src="thumb.jpg"/></a>
<a href="highres.jpg"><img src="thumb.jpg"/></a>
</p>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">
<col align="left"></col><col align="left"></col>
<thead>
<tr><th>Merge Sort (Random List)</th><th></th></tr>
</thead>
</table>



<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">
<colgroup><col align="left"></col></colgroup><colgroup><col align="right"></col><col align="right"></col><col align="left"></col><col align="left"></col><col align="left"></col></colgroup>
<thead>
<tr><th>input size</th><th>C++</th><th>C++ O1</th><th>C++ O2</th><th>C++ O3</th><th>Java</th></tr>
</thead>
<tbody>
<tr><td>60,000</td><td>0.02</td><td>0.01</td><td>0.01</td><td>0.01</td><td>0.043321</td></tr>
<tr><td>70,000</td><td>0.02</td><td>0.01</td><td>0.01</td><td>0.01</td><td>0.041984</td></tr>
<tr><td>80,000</td><td>0.02</td><td>0.01</td><td>0.01</td><td>0.01</td><td>0.044143</td></tr>
<tr><td>90,000</td><td>0.02</td><td>0.02</td><td>0.01</td><td>0.01</td><td>0.045965</td></tr>
<tr><td>100,000</td><td>0.02</td><td>0.01</td><td>0.02</td><td>0.01</td><td>0.048341</td></tr>
</tbody>
</table>



<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">
<col align="left"></col><col align="left"></col>
<thead>
<tr><th>Quick Sort (Random List)</th><th></th></tr>
</thead>
</table>



<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">
<colgroup><col align="left"></col></colgroup><colgroup><col align="right"></col><col align="right"></col><col align="left"></col><col align="left"></col><col align="left"></col></colgroup>
<thead>
<tr><th>input size</th><th>C++</th><th>C++ O1</th><th>C++ O2</th><th>C++ O3</th><th>Java</th></tr>
</thead>
<tbody>
<tr><td>60,000</td><td>0.01</td><td>0</td><td>0.01</td><td>0.01</td><td>0.015228</td></tr>
<tr><td>70,000</td><td>0.01</td><td>0.01</td><td>0</td><td>0.01</td><td>0.01626</td></tr>
<tr><td>80,000</td><td>0.01</td><td>0.01</td><td>0.01</td><td>0</td><td>0.02116</td></tr>
<tr><td>90,000</td><td>0.01</td><td>0</td><td>0.01</td><td>0.01</td><td>0.015771</td></tr>
<tr><td>100,000</td><td>0.01</td><td>0.01</td><td>0.01</td><td>0.01</td><td>0.017148</td></tr>
</tbody>
</table>



<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">
<col align="left"></col><col align="left"></col>
<thead>
<tr><th>Merge Sort (Backward List)</th><th></th></tr>
</thead>
</table>



<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">
<colgroup><col align="left"></col></colgroup><colgroup><col align="right"></col><col align="right"></col><col align="left"></col><col align="left"></col><col align="left"></col></colgroup>
<thead>
<tr><th>input size</th><th>C++</th><th>C++ O1</th><th>C++ O2</th><th>C++ O3</th><th>Java</th></tr>
</thead>
<tbody>
<tr><td>60,000</td><td>0.01</td><td>0</td><td>0.01</td><td>0</td><td>0.004626</td></tr>
<tr><td>70,000</td><td>0.01</td><td>0.01</td><td>0.01</td><td>0.01</td><td>0.007117</td></tr>
<tr><td>80,000</td><td>0.01</td><td>0.01</td><td>0.01</td><td>0.01</td><td>0.008038</td></tr>
<tr><td>90,000</td><td>0.02</td><td>0.01</td><td>0.01</td><td>0.01</td><td>0.00878</td></tr>
<tr><td>100,000</td><td>0.02</td><td>0.01</td><td>0.01</td><td>0.01</td><td>0.00887</td></tr>
</tbody>
</table>



<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">
<col align="left"></col><col align="left"></col>
<thead>
<tr><th>Quick Sort (Backward List)</th><th></th></tr>
</thead>
</table>



<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">
<colgroup><col align="left"></col></colgroup><colgroup><col align="right"></col><col align="right"></col><col align="left"></col><col align="left"></col><col align="left"></col></colgroup>
<thead>
<tr><th>input size</th><th>C++</th><th>C++ O1</th><th>C++ O2</th><th>C++ O3</th><th>Java</th></tr>
</thead>
<tbody>
<tr><td>60,000</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0.001218</td></tr>
<tr><td>70,000</td><td>0.01</td><td>0</td><td>0</td><td>0</td><td>0.001606</td></tr>
<tr><td>80,000</td><td>0.01</td><td>0</td><td>0</td><td>0</td><td>0.001709</td></tr>
<tr><td>90,000</td><td>0.01</td><td>0</td><td>0</td><td>0</td><td>0.002097</td></tr>
<tr><td>100,000</td><td>0.01</td><td>0</td><td>0</td><td>0</td><td>0.002138</td></tr>
</tbody>
</table>



<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">
<col align="left"></col><col align="left"></col>
<thead>
<tr><th>Merge Sort (Sorted List)</th><th></th></tr>
</thead>
</table>



<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">
<colgroup><col align="left"></col></colgroup><colgroup><col align="right"></col><col align="right"></col><col align="left"></col><col align="left"></col><col align="left"></col></colgroup>
<thead>
<tr><th>input size</th><th>C++</th><th>C++ O1</th><th>C++ O2</th><th>C++ O3</th><th>Java</th></tr>
</thead>
<tbody>
<tr><td>60,000</td><td>0.01</td><td>0.01</td><td>0</td><td>0.01</td><td>0.006226</td></tr>
<tr><td>70,000</td><td>0.01</td><td>0.01</td><td>0.01</td><td>0.01</td><td>0.005073</td></tr>
<tr><td>80,000</td><td>0.02</td><td>0.01</td><td>0.01</td><td>0.01</td><td>0.005703</td></tr>
<tr><td>90,000</td><td>0.01</td><td>0.01</td><td>0.01</td><td>0.01</td><td>0.006267</td></tr>
<tr><td>100,000</td><td>0.02</td><td>0.01</td><td>0.01</td><td>0.01</td><td>0.008726</td></tr>
</tbody>
</table>



<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">
<col align="left"></col><col align="left"></col>
<thead>
<tr><th>Quick Sort (Sorted List)</th><th></th></tr>
</thead>
</table>



<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">
<colgroup><col align="left"></col></colgroup><colgroup><col align="right"></col><col align="right"></col><col align="left"></col><col align="left"></col><col align="left"></col></colgroup>
<thead>
<tr><th>input size</th><th>C++</th><th>C++ O1</th><th>C++ O2</th><th>C++ O3</th><th>Java</th></tr>
</thead>
<tbody>
<tr><td>60,000</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0.001149</td></tr>
<tr><td>70,000</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0.001534</td></tr>
<tr><td>80,000</td><td>0</td><td>0</td><td>0</td><td>0.01</td><td>0.001581</td></tr>
<tr><td>90,000</td><td>0</td><td>0.01</td><td>0</td><td>0</td><td>0.002011</td></tr>
<tr><td>100,000</td><td>0</td><td>0.01</td><td>0</td><td>0</td><td>0.002024</td></tr>
</tbody>
</table>



<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">
<col align="left"></col><col align="left"></col>
<thead>
<tr><th>Merge Sort (Almost Sorted List)</th><th></th></tr>
</thead>
</table>



<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">
<colgroup><col align="left"></col></colgroup><colgroup><col align="right"></col><col align="right"></col><col align="left"></col><col align="left"></col><col align="left"></col></colgroup>
<thead>
<tr><th>input size</th><th>C++</th><th>C++ O1</th><th>C++ O2</th><th>C++ O3</th><th>Java</th></tr>
</thead>
<tbody>
<tr><td>60,000</td><td>0.01</td><td>0.01</td><td>0.01</td><td>0</td><td>0.004627</td></tr>
<tr><td>70,000</td><td>0.01</td><td>0</td><td>0.01</td><td>0</td><td>0.005328</td></tr>
<tr><td>80,000</td><td>0.01</td><td>0</td><td>0</td><td>0.01</td><td>0.007938</td></tr>
<tr><td>90,000</td><td>0.02</td><td>0.01</td><td>0.01</td><td>0.01</td><td>0.008881</td></tr>
<tr><td>100,000</td><td>0.02</td><td>0.01</td><td>0.01</td><td>0.01</td><td>0.007769</td></tr>
</tbody>
</table>



<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">
<col align="left"></col><col align="left"></col>
<thead>
<tr><th>Quick Sort (Almost Sorted List)</th><th></th></tr>
</thead>
</table>



<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">
<colgroup><col align="left"></col></colgroup><colgroup><col align="right"></col><col align="right"></col><col align="left"></col><col align="left"></col><col align="left"></col></colgroup>
<thead>
<tr><th>input size</th><th>C++</th><th>C++ O1</th><th>C++ O2</th><th>C++ O3</th><th>Java</th></tr>
</thead>
<tbody>
<tr><td>60,000</td><td>0.01</td><td>0</td><td>0</td><td>0</td><td>0.001648</td></tr>
<tr><td>70,000</td><td>0.01</td><td>0</td><td>0.01</td><td>0</td><td>0.002114</td></tr>
<tr><td>80,000</td><td>0.01</td><td>0</td><td>0.01</td><td>0</td><td>0.002303</td></tr>
<tr><td>90,000</td><td>0.01</td><td>0</td><td>0</td><td>0</td><td>0.002993</td></tr>
<tr><td>100,000</td><td>0.01</td><td>0</td><td>0</td><td>0.01</td><td>0.003095</td></tr>
</tbody>
</table>


</div>

</div>

<div id="outline-container-1.1.3" class="outline-4">
<h4 id="sec-1.1.3">Conclusions </h4>
<div id="text-1.1.3">


<p>
While environment did have an effect on the results, the algorithm
chosen was by far the largest factor in performance. This isn't
particularly surprising, but it does re-affirm that sometimes we just
need a new way of looking at the same problem. Environmental factors
also do play a significant role. Java is not inherently
slow. Optimizing the code did make a big difference, but really only
between unoptimized and optimization one in this case. Understanding
things like branch prediction can help in re-factoring code to run
quicker. Basically, we need to understand what is going on to make
practical decisions. Theory can help you get started, but it doesn't
always match up exactly to what you need. We need to understand more
than just the homework problems to be successful.
</p></div>
</div>
</div>
</div>
<div id="postamble"><p class="author"> Author: Brady Field
<a href="mailto:emrys@AUS213L30.byui.edu">&lt;emrys@AUS213L30.byui.edu&gt;</a>
</p>
<p class="date"> Date: 2016-06-22 14:29:32 MDT</p>
<p>HTML generated by org-mode 6.21b in emacs 23</p>
</div></body>
</html>
