# Created 2016-04-28 Thu 16:29
#+OPTIONS: H:4 num:nil toc:nil \n:nil @:t ::t |:t ^:t *:t TeX:t LaTeX:t
#+TITLE: Chapter 2 Exercises
#+AUTHOR: Brady Field
#+LANGUAGE: en
#+STARTUP: showeverything

* Collaborators: Thom Allen, Kopsa brothers, Matthew Ary
Thom worked the math problems with me and served as a good subject to teach summations and how to adjust them.

Matthew provided assistance with translatating our notes into Latex format.

The Kopsa Brothers answered some general questions about the assignment.

* Exercise 1 on page 50

For each of the following algorithms, indicate (i) a natural size metric
for its inputs; (ii) its basic operation; (iii) whether the basic operation count
can be different for inputs of the same size:

*a.* computing the sum of \(n\) numbers

*b.* computing \(n!\)

*c.* finding the largest element in a list of \(n\) numbers

*d.* Euclid's algorithm

*e.* sieve of Eratosthenes

/Up to 3 points are possible for a good answer for each part (*a-e*),
for a total possible of 15 points./

Here is an example of a good answer for part *a*:

| (i)   | \(n\)                   |
| (ii)  | addition of two numbers |
| (iii) | no                      |

** Solutions

*b.* 

| (i)   | \(n\)                   |
| (ii)  | multiplication of two numbers |
| (iii) | no                      |

*c.* 

| (i)   | \(n\)                   |
| (ii)  | comparison of two numbers |
| (iii) | no                      |

*d.* Euclid's algorithm

| (i)   | 2                       |
| (ii)  | modulus of two numbers  |
| (iii) | yes                     |

*e.* sieve of Eratosthenes

| (i)   | \(n\)                   |
| (ii)  | multiplication of two numbers |
| (iii) | no                      |


* Exercise 8 on page 51

For each of the following functions, indicate how much the
function's value will change if its argument is increased fourfold.

*a.* \(log_2\ n\)

*b.* \(\sqrt{n}\)

*c.* \(n\)

*d.* \(n^2\)

*e.* \(n^3\)

*f.* \(2^n\)

/Up to 2 points are possible (1 for a correct numerator, 1 for a correct denominator of a ratio giving the value change) for a good
answer for each part (*a-f*), for a total possible of 12 points./

Here is an example of a good answer for part *a*:

\(log_2\ n\). Value change: \(\frac{\log_2 4n}{\log_2 n} = \log_2 4n - \log_2 n = (\log_2 4 + \log_2 n) - \log_2 n = 2\)

** Solutions

*b.* \(\(\frac{\sqrt{4n}}{\sqrt{n}}=2\)\)

*c.* \(\(\frac{4n}{n}=4\)\)

*d.* \(\frac{\left(4n\right)^2}{n^2}=4^2=16\)

*e.* \(\frac{\left(4n\right)^3}{n^3}=\frac{4^3n^3}{n^3}=64\)

*f.* \(\frac{2^{\left(4n\right)}}{2^n}=2^{4n-n}=2^{3n}=8^n\)

* Exercise 3 on page 59

For each of the following functions, indicate the class \Theta(/g(n)/)
the function belongs to. (Use the simplest /g(n)/ possible in your answers.)
Prove your assertions.

*a.* \((n^2 + 1)^{10}\)

*b.* \(\sqrt{10n^2 + 7n + 3}\)

*d.* \(2^{n + 1} + 3^{n - 1}\)

/Up to 3 points are possible for a good answer for each part (*a, b, d*),
for a total possible of 9 points./

Here is an example of a good answer for part *a*:

\((n^2 + 1)^{10}.\) To prove this is in \(\Theta(n^{20})\):
\[ \lim_{n \rightarrow \infty} \frac{(n^2 + 1)^{10}}{n^{20}} =
   \lim_{n \rightarrow \infty} \frac{(n^2 + 1)^{10}}{(n^2)^{10}} =
   \lim_{n \rightarrow \infty} \left( \frac{n^2 + 1}{n^2} \right)^{10} =
   \lim_{n \rightarrow \infty} \left( 1 + \frac{1}{n^2} \right)^{10} = 1.
\]
Or, informally: \((n^2 + 1)^{10} \approx (n^2)^{10} = n^{20} \in \Theta(n^{20})\)

** Solutions

*b.* \(\lim_{n\to\infty}\left(\frac{\sqrt{10n^2+7n+3}}{n}\right)=\lim_{n\to\infty}\left(\frac{\frac{20n+7}{2\sqrt{10n^2+7n+3}}}{n}\right)=\sqrt{10}\)
*d.* \(\lim_{x\to\infty}\left(\frac{\left(2^{n+1}+3^{n-1}\right)}{3^n}\right)=\frac{1}{3}\)

* Exercise 1 on page 67

Compute the following sums.

*a.* \(1 + 3 + 5 + 7 + \cdots + 999\)

*b.* \(2 + 4 + 8 + 16 + \cdots + 1024\)

*c.* \(\Sigma_{i = 3}^{n + 1} 1\)

*d.* \(\Sigma_{i = 3}^{n + 1} i\)

*e.* \(\Sigma_{i = 0}^{n - 1} i(i + 1)\)

/Up to 2 points are possible for a good answer (1 for the correct answer, 1 for showing how you got it) for each part (*a-e*),
for a total possible of 10 points./

Here is an example of a good answer for part *a*:

\[ 1 + 3 + 5 + 7 + \cdots + 999 = \sum_{i = 1}^{500} (2i - 1) = \sum_{i = 1}^{500} 2i - \sum_{i = 1}^{500} 1
= 2 \frac{500 * 501}{2} - 500 = 250,000.
\]
(Or, by using the formula for the sum of the arithmetic series with \(a_1 = 1, a_n = 999, n = 500, \frac{(a_1 + a_n)n}{2} =
\frac{(1 + 999)500}{2} = 250,000\).)

** Solutions

*b.* \(2+4+8+16+...+1024=\sum_{i=1}^{10}\left(2^i\right)=2^{n+1}-2=2046\)

*c.* \(\sum_{i=3}^{n+1}1=n+1-2=n-1\)

*d.* \(\sum_{i=3}^{n+1}i=\frac{n\left(n+1\right)}{2}-3+n+1=\frac{\left(n\left(n+1\right)-6+2n+1\right)}{2}=\frac{\left(n^2+n-6+2n+2\right)}{2}=\frac{\left(n^2+3n-4\right)}{2}\)

*e.* \(\sum_{i=0}^ni\left(i+1\right)=\sum_{i=0}^{n-1}i^2+i=\sum_{i=0}^{n-1}i^2+\sum_{i=0}^{n-1}i=\sum_{i=0}^{n-1}i^2+\sum_{i=0}^{n-1}i=\frac{\left(n-1\right)n\left(2n-1\right)}{6}+\frac{\left(n-1\right)n}{2}=\frac{n\left(n^2-1\right)}{3}\)

* Exercise 2 on page 67

Find the order of growth of the following sums. Use the \Theta(/g(n)/)
notation with the simplest function /g(n)/ possible.

*a.* \(\Sigma_{i = 0}^{n - 1}\ (i^2 + 1)^2\)

*b.* \(\Sigma_{i =2}^{n - 1}\ \mbox{lg}\ i^2\)

*c.* \(\Sigma_{i = 1}^{n}\ (i + 1)2^{i - 1}\)

/Up to 2 points are possible for a good answer (1 for the correct answer, 1 for showing how you got it) for each part (*a-c*),
for a total possible of 6 points./

Here is an example of a good answer for part *a*:

\[ \sum_{i = 0}^{n - 1} (i^2 + 1)^2 = \sum_{i = 0}^{n - 1}(i^4 + 2i^2 + 1) = \sum_{i = 0}^{n - 1} i^4 + 2 \sum_{i = 0}^{n - 1} i^2 + \sum_{i = 0}^{n - 1} 1 \in \Theta(n^5) + \Theta(n^3) + \Theta(n) = \Theta(n^5)
\]
\[(\mbox{or just} \sum_{i = 0}^{n - 1} (i^2 + i)^2 \approx \sum_{i = 0}^{n - 1} i^4 \in \Theta(n^5)).
\]


** Solutions

*b.* \(\sum_{i=2}^{n-1}\left(\log_2i^2\right)=\sum_{i=2}^{n-1}2\log_2i=2\sum_{i=2}^{n-1}\log_2i=2\sum_{i=2}^{n-1}\log_2i-2\log_2n\rightarrow\epsilon\Theta\left(n\log n\right)\)

*c.* \(\sum_{i=1}^n\left(i+1\right)2^{i-1}=\sum_{i=1}^ni2^{i-1}+2^{i-1}=\sum_{i=1}^ni2^{i-1}+\sum_{i=1}^n2^{i-1}=\frac{1}{2}\sum_{i=1}^ni2^i+\sum_{i=0}^{n-1}2\rightarrow\epsilon\Theta(n2^n)+\Theta\left(2n\right)=\Theta\left(n2^n\right)\)


* Exercise 2 on page 76

Set up and solve a recurrence relation for the number of calls made by /F(n)/,
the recursive algorithm for computing /n!/.

/Up to 5 points are possible for a good answer./

** Solution
\(F\left(n\right)=1+F\left(n-1\right)=n\)

* Exercise 3 on page 76

Consider the following recursive algorithm for computing the sum of the first
/n/ cubes: \(S(n) = 1^3 + 2^3 + ... + n^3.\)

#+HTML: <pre>
*Algorithm* /S(n)/
  //// Input: A positive integer /n/
  //// Output: The sum of the first /n/ cubes
  *if* /n = 1/ *return* 1
  *else return* /S(n − 1) + n * n * n/
#+HTML: </pre>

*a.* Set up and solve a recurrence relation for the number of times the algorithm's
   basic operation is executed.

*b.* How does this algorithm compare with the straightforward nonrecursive
   algorithm for computing this sum?

/Up to 4 points are possible for each part (*a-b*), for a total possible of 8 points./

* Exercise 7 on page 78

*a.* Prove that the exact number of additions made by the recursive algorithm
   /BinRec(n)/ for an arbitrary positive decimal integer n is \(\lfloor log_2 n \rfloor\).

*b.* Set up a recurrence relation for the number of additions made by the
   nonrecursive version of this algorithm (see Section 2.3, Example 4) and
   solve it.

/Up to 5 points are possible for each part (*a-b*), for a total possible of 10 points./

* Exercise 13 on page 78

/Frying hamburgers/

There are /n/ hamburgers to be fried on a small grill that
can hold only two hamburgers at a time. Each hamburger has to be fried
on both sides; frying one side of a hamburger takes 1 minute, regardless of
whether one or two hamburgers are fried at the same time. Consider the
following recursive algorithm for executing this task in the minimum amount
of time. If \(n \le 2\), fry the hamburger or the two hamburgers together on each
side. If \(n > 2\), fry any two hamburgers together on each side and then apply
the same procedure recursively to the remaining /n − 2/ hamburgers.

*a.* Set up and solve the recurrence for the amount of time this algorithm needs
   to fry /n/ hamburgers.

*b.* Explain why this algorithm does not fry the hamburgers in the minimum
   amount of time for all /n > 0/.

*c.* Give a correct recursive algorithm that executes the task in the minimum
   amount of time.

/Up to 4 points are possible for each part (*a-c*), for a total possible of 12 points./

* Exercise 6 on page 83

The maximum values of the Java primitive types *int* and *long* are 2^31 − 1 and
2^63 − 1, respectively. Find the smallest /n/ for which the \(n\)th Fibonacci number
is not going to fit in a memory allocated for

*a.* the type *int*.

*b.* the type *long*.

/Up to 2 points are possible for each part (*a-b*), for a total possible of 4 points./

* Exercise 9 on page 84

Prove the equality

\[\left[ \begin{array}{cc} F(n - 1) & F(n)\\ F(n) & F(n + 1)\\ \end{array} \right]
  = \left[ \begin{array}{cc} 0 & 1\\ 1 & 1\\ \end{array} \right]^n\ \mbox{for}\ n \ge 1.\]

/Up to 4 points are possible for a good answer./

(To be done in class via mathematical induction.)
